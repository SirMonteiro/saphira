"""
Django settings for saphira project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from os import getenv
from sys import exit

from dotenv import load_dotenv

# Carrega as variáveis do .env
load_dotenv()

from .firebase_config import *  # Importa a inicialização do Firebase

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('SAPHIRA_JWT_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
ENV = getenv('SAPHIRA_ENV')
if ENV == 'DEBUG' or ENV == 'DEV':
    DEBUG = True
elif ENV == 'PRODUCTION':
    DEBUG = False
else:
    print('Could not find SAPHIRA_ENV variable to determine running environment')
    print('Choose between DEBUG and PRODUCTION')
    exit(1)

if ENV == 'PRODUCTION':
    ALLOWED_HOSTS = [
        'semanadesi.com',
        'www.semanadesi.com',
        'co-dashboard.semanadesi.com',
        'www.co-dashboard.semanadesi.com',
        'saphira.semanadesi.com',
        'www.saphira.semanadesi.com',
    ]
else:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        'semanadesi.com',
        'www.semanadesi.com',
        'co-dashboard.semanadesi.com',
        'www.co-dashboard.semanadesi.com',
        'saphira.semanadesi.com',
        'www.saphira.semanadesi.com',
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt',
    'rest_framework',
    'api',
    'corsheaders',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
   'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication', # Para autenticação de estudante
        'rest_framework.authentication.SessionAuthentication', # Para autenticação de admin com cookies
   ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny', # Por padrão, todas as rotas são públicas
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
}

# Configuração para cookies de sessão
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# Configurações básicas de cookies
SESSION_COOKIE_NAME = 'sessionid'

SESSION_COOKIE_DOMAIN = '.semanadesi.com' if ENV == 'PRODUCTION' else None
SESSION_COOKIE_SECURE = True # Use True se estiver usando HTTPS
SESSION_COOKIE_HTTPONLY = False
SESSION_COOKIE_SAMESITE = 'None' # Necessário quando front e API estão em (sub)domínios diferentes

CSRF_COOKIE_DOMAIN = '.semanadesi.com' if ENV == 'PRODUCTION' else None
CSRF_COOKIE_SECURE = True # Para proteger o CSRF token via HTTPS
CSRF_COOKIE_HTTPONLY = False # Não deve ser HttpOnly para funcionar com JavaScript
CSRF_USE_SESSIONS = False

CSRF_COOKIE_SAMESITE = 'None' #'Lax' ou 'Strict'
if ENV == 'PRODUCTION':
    CSRF_TRUSTED_ORIGINS = [
        "https://semanadesi.com",
        "https://saphira.semanadesi.com",
        "https://co-dashboard.semanadesi.com",
    ]
else:
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://semanadesi.com",
        "https://saphira.semanadesi.com",
        "https://co-dashboard.semanadesi.com",
    ]

# Como os domínios são diferentes, é necessário permitir o envio de cookies
if ENV == 'PRODUCTION':
    CORS_ALLOWED_ORIGINS = [
        "https://semanadesi.com",
        "https://saphira.semanadesi.com",
        "https://co-dashboard.semanadesi.com",
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://semanadesi.com",
        "https://saphira.semanadesi.com",
        "https://co-dashboard.semanadesi.com",
    ]
CORS_ALLOW_CREDENTIALS = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'saphira.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'saphira.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': getenv('POSTGRES_DB'),
    'USER': getenv('POSTGRES_USER'),
    'PASSWORD': getenv('POSTGRES_PASSWORD'),
    'HOST': getenv('POSTGRES_HOST'),
    'PORT': getenv('POSTGRES_PORT'),
  }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
